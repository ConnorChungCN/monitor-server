// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.6.1
// source: scheduler/scheduler.proto

// 包名

package scheduler

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Algorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    int64  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Part    int64  `protobuf:"varint,3,opt,name=part,proto3" json:"part,omitempty"`
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Schema  string `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Algorithm) Reset() {
	*x = Algorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Algorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm) ProtoMessage() {}

func (x *Algorithm) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm.ProtoReflect.Descriptor instead.
func (*Algorithm) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *Algorithm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Algorithm) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Algorithm) GetPart() int64 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *Algorithm) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Algorithm) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Algorithm) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskId        string     `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	WorkerId      string     `protobuf:"bytes,3,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Algorithm     *Algorithm `protobuf:"bytes,4,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Status        int64      `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	ExecutorState int64      `protobuf:"varint,6,opt,name=executor_state,json=executorState,proto3" json:"executor_state,omitempty"`
	Desc          string     `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`
	Input         string     `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	Output        string     `protobuf:"bytes,9,opt,name=output,proto3" json:"output,omitempty"`
	Ctime         int64      `protobuf:"varint,10,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Utime         int64      `protobuf:"varint,11,opt,name=utime,proto3" json:"utime,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *TaskInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *TaskInfo) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *TaskInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskInfo) GetExecutorState() int64 {
	if x != nil {
		return x.ExecutorState
	}
	return 0
}

func (x *TaskInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TaskInfo) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TaskInfo) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *TaskInfo) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *TaskInfo) GetUtime() int64 {
	if x != nil {
		return x.Utime
	}
	return 0
}

type SysStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu        float32 `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory     float32 `protobuf:"fixed32,2,opt,name=memory,proto3" json:"memory,omitempty"`
	CpuCore    int64   `protobuf:"varint,3,opt,name=cpu_core,json=cpuCore,proto3" json:"cpu_core,omitempty"`
	MemorySize int64   `protobuf:"varint,4,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
}

func (x *SysStatus) Reset() {
	*x = SysStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStatus) ProtoMessage() {}

func (x *SysStatus) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStatus.ProtoReflect.Descriptor instead.
func (*SysStatus) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *SysStatus) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *SysStatus) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SysStatus) GetCpuCore() int64 {
	if x != nil {
		return x.CpuCore
	}
	return 0
}

func (x *SysStatus) GetMemorySize() int64 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

type WorkerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Host        string     `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port        int64      `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Status      int64      `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Ctime       int64      `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Utime       int64      `protobuf:"varint,7,opt,name=utime,proto3" json:"utime,omitempty"`
	RunningTask *TaskInfo  `protobuf:"bytes,8,opt,name=running_task,json=runningTask,proto3" json:"running_task,omitempty"`
	SysStatus   *SysStatus `protobuf:"bytes,9,opt,name=sys_status,json=sysStatus,proto3" json:"sys_status,omitempty"`
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *WorkerInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WorkerInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WorkerInfo) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *WorkerInfo) GetUtime() int64 {
	if x != nil {
		return x.Utime
	}
	return 0
}

func (x *WorkerInfo) GetRunningTask() *TaskInfo {
	if x != nil {
		return x.RunningTask
	}
	return nil
}

func (x *WorkerInfo) GetSysStatus() *SysStatus {
	if x != nil {
		return x.SysStatus
	}
	return nil
}

type ListWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWorkerReq) Reset() {
	*x = ListWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkerReq) ProtoMessage() {}

func (x *ListWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkerReq.ProtoReflect.Descriptor instead.
func (*ListWorkerReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{4}
}

type ListWorkerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workers []*WorkerInfo `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
}

func (x *ListWorkerRsp) Reset() {
	*x = ListWorkerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkerRsp) ProtoMessage() {}

func (x *ListWorkerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkerRsp.ProtoReflect.Descriptor instead.
func (*ListWorkerRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *ListWorkerRsp) GetWorkers() []*WorkerInfo {
	if x != nil {
		return x.Workers
	}
	return nil
}

type RegistetWorkerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Worker *WorkerInfo `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (x *RegistetWorkerReq) Reset() {
	*x = RegistetWorkerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistetWorkerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistetWorkerReq) ProtoMessage() {}

func (x *RegistetWorkerReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistetWorkerReq.ProtoReflect.Descriptor instead.
func (*RegistetWorkerReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *RegistetWorkerReq) GetWorker() *WorkerInfo {
	if x != nil {
		return x.Worker
	}
	return nil
}

type RegistetWorkerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegistetWorkerRsp) Reset() {
	*x = RegistetWorkerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistetWorkerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistetWorkerRsp) ProtoMessage() {}

func (x *RegistetWorkerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistetWorkerRsp.ProtoReflect.Descriptor instead.
func (*RegistetWorkerRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{7}
}

type StartTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params    string     `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Algorithm *Algorithm `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *StartTaskReq) Reset() {
	*x = StartTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskReq) ProtoMessage() {}

func (x *StartTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskReq.ProtoReflect.Descriptor instead.
func (*StartTaskReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{8}
}

func (x *StartTaskReq) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *StartTaskReq) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

type StartTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StartTaskRsp) Reset() {
	*x = StartTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTaskRsp) ProtoMessage() {}

func (x *StartTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTaskRsp.ProtoReflect.Descriptor instead.
func (*StartTaskRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{9}
}

func (x *StartTaskRsp) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type StopTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StopTaskReq) Reset() {
	*x = StopTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskReq) ProtoMessage() {}

func (x *StopTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskReq.ProtoReflect.Descriptor instead.
func (*StopTaskReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{10}
}

func (x *StopTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type StopTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopTaskRsp) Reset() {
	*x = StopTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTaskRsp) ProtoMessage() {}

func (x *StopTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTaskRsp.ProtoReflect.Descriptor instead.
func (*StopTaskRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{11}
}

type GetTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetTaskReq) Reset() {
	*x = GetTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskReq) ProtoMessage() {}

func (x *GetTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskReq.ProtoReflect.Descriptor instead.
func (*GetTaskReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{12}
}

func (x *GetTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TaskInfo `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *GetTaskRsp) Reset() {
	*x = GetTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRsp) ProtoMessage() {}

func (x *GetTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRsp.ProtoReflect.Descriptor instead.
func (*GetTaskRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{13}
}

func (x *GetTaskRsp) GetTask() *TaskInfo {
	if x != nil {
		return x.Task
	}
	return nil
}

type ListTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTaskReq) Reset() {
	*x = ListTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskReq) ProtoMessage() {}

func (x *ListTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskReq.ProtoReflect.Descriptor instead.
func (*ListTaskReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{14}
}

type ListTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskInfo `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListTaskRsp) Reset() {
	*x = ListTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRsp) ProtoMessage() {}

func (x *ListTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRsp.ProtoReflect.Descriptor instead.
func (*ListTaskRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{15}
}

func (x *ListTaskRsp) GetTasks() []*TaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type SetTaskResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reusult string `protobuf:"bytes,2,opt,name=reusult,proto3" json:"reusult,omitempty"`
	State   int64  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Desc    string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *SetTaskResultReq) Reset() {
	*x = SetTaskResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskResultReq) ProtoMessage() {}

func (x *SetTaskResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskResultReq.ProtoReflect.Descriptor instead.
func (*SetTaskResultReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{16}
}

func (x *SetTaskResultReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SetTaskResultReq) GetReusult() string {
	if x != nil {
		return x.Reusult
	}
	return ""
}

func (x *SetTaskResultReq) GetState() int64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SetTaskResultReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type SetTaskResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTaskResultRsp) Reset() {
	*x = SetTaskResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTaskResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTaskResultRsp) ProtoMessage() {}

func (x *SetTaskResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTaskResultRsp.ProtoReflect.Descriptor instead.
func (*SetTaskResultRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{17}
}

// 通过TaskId请求
type SubscribeTaskResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *SubscribeTaskResultReq) Reset() {
	*x = SubscribeTaskResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTaskResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTaskResultReq) ProtoMessage() {}

func (x *SubscribeTaskResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTaskResultReq.ProtoReflect.Descriptor instead.
func (*SubscribeTaskResultReq) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{18}
}

func (x *SubscribeTaskResultReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 返回订阅任务的信息
type SubscribeTaskResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TaskInfo `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *SubscribeTaskResultRsp) Reset() {
	*x = SubscribeTaskResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_scheduler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTaskResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTaskResultRsp) ProtoMessage() {}

func (x *SubscribeTaskResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_scheduler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTaskResultRsp.ProtoReflect.Descriptor instead.
func (*SubscribeTaskResultRsp) Descriptor() ([]byte, []int) {
	return file_scheduler_scheduler_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeTaskResultRsp) GetTask() *TaskInfo {
	if x != nil {
		return x.Task
	}
	return nil
}

var File_scheduler_scheduler_proto protoreflect.FileDescriptor

var file_scheduler_scheduler_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xb1, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x09, 0x53, 0x79,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x89, 0x02,
	0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0c,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x73, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x22, 0x40, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x42, 0x0a, 0x11,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x2d, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x5a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x22, 0x27, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73,
	0x70, 0x22, 0x25, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x22, 0x38,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x6f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x75, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x75, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x22, 0x31, 0x0a,
	0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x41, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x32, 0xb6, 0x04, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52,
	0x73, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73,
	0x70, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x37, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x16, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x73, 0x70, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x5d, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x30, 0x01, 0x42, 0x2a, 0x5a, 0x28,
	0x2e, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x3b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_scheduler_proto_rawDescOnce sync.Once
	file_scheduler_scheduler_proto_rawDescData = file_scheduler_scheduler_proto_rawDesc
)

func file_scheduler_scheduler_proto_rawDescGZIP() []byte {
	file_scheduler_scheduler_proto_rawDescOnce.Do(func() {
		file_scheduler_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_scheduler_proto_rawDescData)
	})
	return file_scheduler_scheduler_proto_rawDescData
}

var file_scheduler_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_scheduler_scheduler_proto_goTypes = []interface{}{
	(*Algorithm)(nil),              // 0: scheduler.Algorithm
	(*TaskInfo)(nil),               // 1: scheduler.TaskInfo
	(*SysStatus)(nil),              // 2: scheduler.SysStatus
	(*WorkerInfo)(nil),             // 3: scheduler.WorkerInfo
	(*ListWorkerReq)(nil),          // 4: scheduler.ListWorkerReq
	(*ListWorkerRsp)(nil),          // 5: scheduler.ListWorkerRsp
	(*RegistetWorkerReq)(nil),      // 6: scheduler.RegistetWorkerReq
	(*RegistetWorkerRsp)(nil),      // 7: scheduler.RegistetWorkerRsp
	(*StartTaskReq)(nil),           // 8: scheduler.StartTaskReq
	(*StartTaskRsp)(nil),           // 9: scheduler.StartTaskRsp
	(*StopTaskReq)(nil),            // 10: scheduler.StopTaskReq
	(*StopTaskRsp)(nil),            // 11: scheduler.StopTaskRsp
	(*GetTaskReq)(nil),             // 12: scheduler.GetTaskReq
	(*GetTaskRsp)(nil),             // 13: scheduler.GetTaskRsp
	(*ListTaskReq)(nil),            // 14: scheduler.ListTaskReq
	(*ListTaskRsp)(nil),            // 15: scheduler.ListTaskRsp
	(*SetTaskResultReq)(nil),       // 16: scheduler.SetTaskResultReq
	(*SetTaskResultRsp)(nil),       // 17: scheduler.SetTaskResultRsp
	(*SubscribeTaskResultReq)(nil), // 18: scheduler.SubscribeTaskResultReq
	(*SubscribeTaskResultRsp)(nil), // 19: scheduler.SubscribeTaskResultRsp
}
var file_scheduler_scheduler_proto_depIdxs = []int32{
	0,  // 0: scheduler.TaskInfo.algorithm:type_name -> scheduler.Algorithm
	1,  // 1: scheduler.WorkerInfo.running_task:type_name -> scheduler.TaskInfo
	2,  // 2: scheduler.WorkerInfo.sys_status:type_name -> scheduler.SysStatus
	3,  // 3: scheduler.ListWorkerRsp.workers:type_name -> scheduler.WorkerInfo
	3,  // 4: scheduler.RegistetWorkerReq.worker:type_name -> scheduler.WorkerInfo
	0,  // 5: scheduler.StartTaskReq.algorithm:type_name -> scheduler.Algorithm
	1,  // 6: scheduler.GetTaskRsp.task:type_name -> scheduler.TaskInfo
	1,  // 7: scheduler.ListTaskRsp.tasks:type_name -> scheduler.TaskInfo
	1,  // 8: scheduler.SubscribeTaskResultRsp.task:type_name -> scheduler.TaskInfo
	4,  // 9: scheduler.Scheduler.ListWorkers:input_type -> scheduler.ListWorkerReq
	6,  // 10: scheduler.Scheduler.RegistetWorker:input_type -> scheduler.RegistetWorkerReq
	8,  // 11: scheduler.Scheduler.StartTask:input_type -> scheduler.StartTaskReq
	10, // 12: scheduler.Scheduler.StopTask:input_type -> scheduler.StopTaskReq
	12, // 13: scheduler.Scheduler.GetTask:input_type -> scheduler.GetTaskReq
	14, // 14: scheduler.Scheduler.ListTask:input_type -> scheduler.ListTaskReq
	16, // 15: scheduler.Scheduler.SetTaskResult:input_type -> scheduler.SetTaskResultReq
	18, // 16: scheduler.Scheduler.SubscribeTaskResult:input_type -> scheduler.SubscribeTaskResultReq
	5,  // 17: scheduler.Scheduler.ListWorkers:output_type -> scheduler.ListWorkerRsp
	7,  // 18: scheduler.Scheduler.RegistetWorker:output_type -> scheduler.RegistetWorkerRsp
	9,  // 19: scheduler.Scheduler.StartTask:output_type -> scheduler.StartTaskRsp
	11, // 20: scheduler.Scheduler.StopTask:output_type -> scheduler.StopTaskRsp
	13, // 21: scheduler.Scheduler.GetTask:output_type -> scheduler.GetTaskRsp
	15, // 22: scheduler.Scheduler.ListTask:output_type -> scheduler.ListTaskRsp
	17, // 23: scheduler.Scheduler.SetTaskResult:output_type -> scheduler.SetTaskResultRsp
	19, // 24: scheduler.Scheduler.SubscribeTaskResult:output_type -> scheduler.SubscribeTaskResultRsp
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_scheduler_scheduler_proto_init() }
func file_scheduler_scheduler_proto_init() {
	if File_scheduler_scheduler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduler_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Algorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistetWorkerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistetWorkerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTaskResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTaskResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_scheduler_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTaskResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_scheduler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scheduler_scheduler_proto_goTypes,
		DependencyIndexes: file_scheduler_scheduler_proto_depIdxs,
		MessageInfos:      file_scheduler_scheduler_proto_msgTypes,
	}.Build()
	File_scheduler_scheduler_proto = out.File
	file_scheduler_scheduler_proto_rawDesc = nil
	file_scheduler_scheduler_proto_goTypes = nil
	file_scheduler_scheduler_proto_depIdxs = nil
}
