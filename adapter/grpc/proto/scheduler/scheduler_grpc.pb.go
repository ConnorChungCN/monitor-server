// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: scheduler.proto

// 包名

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Scheduler_ListWorkers_FullMethodName         = "/scheduler.Scheduler/ListWorkers"
	Scheduler_RegistetWorker_FullMethodName      = "/scheduler.Scheduler/RegistetWorker"
	Scheduler_StartTask_FullMethodName           = "/scheduler.Scheduler/StartTask"
	Scheduler_StopTask_FullMethodName            = "/scheduler.Scheduler/StopTask"
	Scheduler_GetTask_FullMethodName             = "/scheduler.Scheduler/GetTask"
	Scheduler_ListTask_FullMethodName            = "/scheduler.Scheduler/ListTask"
	Scheduler_SetTaskResult_FullMethodName       = "/scheduler.Scheduler/SetTaskResult"
	Scheduler_SubscribeTaskResult_FullMethodName = "/scheduler.Scheduler/SubscribeTaskResult"
)

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	ListWorkers(ctx context.Context, in *ListWorkerReq, opts ...grpc.CallOption) (*ListWorkerRsp, error)
	RegistetWorker(ctx context.Context, in *RegistetWorkerReq, opts ...grpc.CallOption) (*RegistetWorkerRsp, error)
	StartTask(ctx context.Context, in *StartTaskReq, opts ...grpc.CallOption) (*StartTaskRsp, error)
	StopTask(ctx context.Context, in *StopTaskReq, opts ...grpc.CallOption) (*StopTaskRsp, error)
	GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetTaskRsp, error)
	ListTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskRsp, error)
	SetTaskResult(ctx context.Context, in *SetTaskResultReq, opts ...grpc.CallOption) (*SetTaskResultRsp, error)
	SubscribeTaskResult(ctx context.Context, in *SubscribeTaskResultReq, opts ...grpc.CallOption) (Scheduler_SubscribeTaskResultClient, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) ListWorkers(ctx context.Context, in *ListWorkerReq, opts ...grpc.CallOption) (*ListWorkerRsp, error) {
	out := new(ListWorkerRsp)
	err := c.cc.Invoke(ctx, Scheduler_ListWorkers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RegistetWorker(ctx context.Context, in *RegistetWorkerReq, opts ...grpc.CallOption) (*RegistetWorkerRsp, error) {
	out := new(RegistetWorkerRsp)
	err := c.cc.Invoke(ctx, Scheduler_RegistetWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StartTask(ctx context.Context, in *StartTaskReq, opts ...grpc.CallOption) (*StartTaskRsp, error) {
	out := new(StartTaskRsp)
	err := c.cc.Invoke(ctx, Scheduler_StartTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) StopTask(ctx context.Context, in *StopTaskReq, opts ...grpc.CallOption) (*StopTaskRsp, error) {
	out := new(StopTaskRsp)
	err := c.cc.Invoke(ctx, Scheduler_StopTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetTask(ctx context.Context, in *GetTaskReq, opts ...grpc.CallOption) (*GetTaskRsp, error) {
	out := new(GetTaskRsp)
	err := c.cc.Invoke(ctx, Scheduler_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskRsp, error) {
	out := new(ListTaskRsp)
	err := c.cc.Invoke(ctx, Scheduler_ListTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SetTaskResult(ctx context.Context, in *SetTaskResultReq, opts ...grpc.CallOption) (*SetTaskResultRsp, error) {
	out := new(SetTaskResultRsp)
	err := c.cc.Invoke(ctx, Scheduler_SetTaskResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SubscribeTaskResult(ctx context.Context, in *SubscribeTaskResultReq, opts ...grpc.CallOption) (Scheduler_SubscribeTaskResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], Scheduler_SubscribeTaskResult_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerSubscribeTaskResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_SubscribeTaskResultClient interface {
	Recv() (*SubscribeTaskResultRsp, error)
	grpc.ClientStream
}

type schedulerSubscribeTaskResultClient struct {
	grpc.ClientStream
}

func (x *schedulerSubscribeTaskResultClient) Recv() (*SubscribeTaskResultRsp, error) {
	m := new(SubscribeTaskResultRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	ListWorkers(context.Context, *ListWorkerReq) (*ListWorkerRsp, error)
	RegistetWorker(context.Context, *RegistetWorkerReq) (*RegistetWorkerRsp, error)
	StartTask(context.Context, *StartTaskReq) (*StartTaskRsp, error)
	StopTask(context.Context, *StopTaskReq) (*StopTaskRsp, error)
	GetTask(context.Context, *GetTaskReq) (*GetTaskRsp, error)
	ListTask(context.Context, *ListTaskReq) (*ListTaskRsp, error)
	SetTaskResult(context.Context, *SetTaskResultReq) (*SetTaskResultRsp, error)
	SubscribeTaskResult(*SubscribeTaskResultReq, Scheduler_SubscribeTaskResultServer) error
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) ListWorkers(context.Context, *ListWorkerReq) (*ListWorkerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedSchedulerServer) RegistetWorker(context.Context, *RegistetWorkerReq) (*RegistetWorkerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistetWorker not implemented")
}
func (UnimplementedSchedulerServer) StartTask(context.Context, *StartTaskReq) (*StartTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (UnimplementedSchedulerServer) StopTask(context.Context, *StopTaskReq) (*StopTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTask not implemented")
}
func (UnimplementedSchedulerServer) GetTask(context.Context, *GetTaskReq) (*GetTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedSchedulerServer) ListTask(context.Context, *ListTaskReq) (*ListTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedSchedulerServer) SetTaskResult(context.Context, *SetTaskResultReq) (*SetTaskResultRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskResult not implemented")
}
func (UnimplementedSchedulerServer) SubscribeTaskResult(*SubscribeTaskResultReq, Scheduler_SubscribeTaskResultServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTaskResult not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListWorkers(ctx, req.(*ListWorkerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RegistetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistetWorkerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RegistetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_RegistetWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RegistetWorker(ctx, req.(*RegistetWorkerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_StartTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StartTask(ctx, req.(*StartTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_StopTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).StopTask(ctx, req.(*StopTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetTask(ctx, req.(*GetTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SetTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SetTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_SetTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SetTaskResult(ctx, req.(*SetTaskResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SubscribeTaskResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTaskResultReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).SubscribeTaskResult(m, &schedulerSubscribeTaskResultServer{stream})
}

type Scheduler_SubscribeTaskResultServer interface {
	Send(*SubscribeTaskResultRsp) error
	grpc.ServerStream
}

type schedulerSubscribeTaskResultServer struct {
	grpc.ServerStream
}

func (x *schedulerSubscribeTaskResultServer) Send(m *SubscribeTaskResultRsp) error {
	return x.ServerStream.SendMsg(m)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkers",
			Handler:    _Scheduler_ListWorkers_Handler,
		},
		{
			MethodName: "RegistetWorker",
			Handler:    _Scheduler_RegistetWorker_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Scheduler_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Scheduler_StopTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Scheduler_GetTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Scheduler_ListTask_Handler,
		},
		{
			MethodName: "SetTaskResult",
			Handler:    _Scheduler_SetTaskResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTaskResult",
			Handler:       _Scheduler_SubscribeTaskResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scheduler.proto",
}
