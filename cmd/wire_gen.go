// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"hanglok-tech.com/monitor-server/adapter/grpc/service"
	"hanglok-tech.com/monitor-server/app/executor"
	"hanglok-tech.com/monitor-server/app/scheduler"
	"hanglok-tech.com/monitor-server/infrastructure/client"
	"hanglok-tech.com/monitor-server/infrastructure/config"
	"hanglok-tech.com/monitor-server/infrastructure/gateway-impl"
)

// Injectors from wire.go:

func initMonitorService(config2 *config.ProjectConfig) (*service.MonitorServer, error) {
	influxDBClient, err := client.NewInfluxDBClient(config2)
	if err != nil {
		return nil, err
	}
	schedulerClient, err := client.NewSchedulerClient(config2)
	if err != nil {
		return nil, err
	}
	monitorGateway, err := gatewayimpl.NewMonitorGateway(influxDBClient, schedulerClient)
	if err != nil {
		return nil, err
	}
	executorExecutor := executor.NewExecutor(monitorGateway)
	monitorServer := service.NewMonitorServer(executorExecutor)
	return monitorServer, nil
}

func initMonitor(config2 *config.ProjectConfig) (*monitorScheduler.Monitor, error) {
	influxDBClient, err := client.NewInfluxDBClient(config2)
	if err != nil {
		return nil, err
	}
	schedulerClient, err := client.NewSchedulerClient(config2)
	if err != nil {
		return nil, err
	}
	monitorGateway, err := gatewayimpl.NewMonitorGateway(influxDBClient, schedulerClient)
	if err != nil {
		return nil, err
	}
	monitor := monitorScheduler.NewMonitor(monitorGateway, schedulerClient)
	return monitor, nil
}
